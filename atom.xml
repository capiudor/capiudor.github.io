<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Capiudor</title>
  
  <subtitle>Blogs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-18T15:14:43.715Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Capiudor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>了解反向代理</title>
    <link href="http://yoursite.com/2019/07/17/%E7%90%86%E8%A7%A3Nginx/"/>
    <id>http://yoursite.com/2019/07/17/理解Nginx/</id>
    <published>2019-07-17T05:04:00.000Z</published>
    <updated>2019-07-18T15:14:43.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-反向代理"><a href="#1-反向代理" class="headerlink" title="1. 反向代理"></a>1. 反向代理</h1><hr><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><hr><p>反向代理（Reverse Proxy） 方式是指意呆利服务器来接收Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><p>举个例子，比如我想访问 <code>http://www.test.com/readme</code>，但 <a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a> 上并不存在readme页面，于是他是偷偷从另外一台服务器上取回来，然后作为自己的内容返回用户，但用户并不知情。这里所提到的 <code>www.test.com</code> 这个域名对应的服务器就设置了反向代理功能。</p><p>结论就是，反向代理服务器对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的，命名空间（name-space）中的内容发送普通请求，接着反向代理服务器将判断向何处（原始服务器）转角请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</p><p>正向代理，既然有反向代理，就肯定有正向代理。什么是正向代理呢？</p><p>正向代理（Forward Proxy）通常被称为代理，就是在用户无法正常访问外部资源，比方说收到GFW的影响无法访问 twitter 的时候，我们可以通过代理的方式，让用户绕过防火墙，从而连接到目标网络或者服务。</p><p>正向代理的工作原理就像一个跳板，比如：我访问不了 google.com ，但是我能访问代理服务器A，A能访问 google.com 于是我先连上服务器A，告诉他我需要google.com的内容，A就去取回来，然后返回给我。从网站的角度，只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求，也隐藏了用户的资料，这取决于代理告不告诉网站。</p><p>结论就是，正向代理是一个位与客户端和原始服务器（origin server）之间的服务器。为了从原始服务器取得内容，客户端向代理返回给客户端。</p><p>反向代理与正向代理：</p><p><img src="https://upload-images.jianshu.io/upload_images/6807865-2cede76e2384c39f.png?imageMogr2/auto-orient/" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/6807865-90603b54f3e3e521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/354/format/webp" alt="img"></p><h2 id="1-2-工作流程"><a href="#1-2-工作流程" class="headerlink" title="1.2 工作流程"></a>1.2 工作流程</h2><hr><ol><li>用户通过裕明发出访问Web服务器的请求，该域名被DNS服务器解析为反向代理服务器的IP地址；</li><li>反向代理服务器接收用户请求；</li><li>反向代理服务器在本地缓存中查找请求的内容，找到后直接把内容发送给用户；</li><li>如果本地缓存里没有用户所请求的信息内容给，方向代理会代替用户向源服务器请求同样的信息内容，并把信息内容发送给用户，如果信息内容是缓存的还会把它保存到缓存中。</li></ol><h2 id="1-3-优点"><a href="#1-3-优点" class="headerlink" title="1.3 优点"></a>1.3 优点</h2><hr><h3 id="1-保护了真是的Web服务器，保证了Web服务器的资源安全"><a href="#1-保护了真是的Web服务器，保证了Web服务器的资源安全" class="headerlink" title="1. 保护了真是的Web服务器，保证了Web服务器的资源安全"></a>1. 保护了真是的Web服务器，保证了Web服务器的资源安全</h3><p>通常的代理服务器，只用于代理内部网络的对Internet 外部网络的连接请求，客户机必须指定代理服务器，并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。不支持外部网络对内部网络的连接请求，因为内部网络对外部网络是不可见的。当一个代理服务器能够代理外部网络上的主机，访问内部网络时，这种代理服务器的方式称为反向代理服务器。此时代理服务器对外表现为一个Web服务器，外部网络就可以简单把它当做一个标准的Web服务器而不需要特定的配置。不同之处在于，这个服务器没有保存任何网页的真实数据，所有的静态网页或者CGI程序，都保存在内部的Web服务器上。因此对反向代理服务器的工具并不会使得网页信息遭到破坏，这样就增强了Web服务器的安全性。</p><h3 id="2-节约了优先的IP地址资源"><a href="#2-节约了优先的IP地址资源" class="headerlink" title="2. 节约了优先的IP地址资源"></a>2. 节约了优先的IP地址资源</h3><p>企业内所有的网站共享一个Internal 中注册的IP地址，这些服务器分配私有地址，采用虚拟主机的方式对外提供服务。</p><h3 id="3-减少Web服务器压力，提高响应速度"><a href="#3-减少Web服务器压力，提高响应速度" class="headerlink" title="3.减少Web服务器压力，提高响应速度"></a>3.减少Web服务器压力，提高响应速度</h3><p>反向代理就是通常所说的Web服务器加速，它是一种通过在繁忙的Web服务器和外部网络之间增加一个高速的web缓冲服务器来降低实际的web服务器的负载的一种技术。反向代理是针对Web服务器提高加速功能，作为代理缓存，它并不是针对浏览器用户，而针对一台或多态特定的Web服务器，它可以代理外部网络对内部网络的访问请求。</p><p>反向代理服务器会强制将外部网络对要代理的服务器的访问经过它，这样反向代理服务器负责接收客户端的请求，然后到源服务器上获取内容，把内容返回给用户，并把内容保存到本地，一遍日后再收到同样的信息请求时，它会把本地缓存里的内容直接发给用户，以后减少后端web服务器的压力，提高响应速度。因此Nginx还具有缓存功能。</p><h3 id="4-其他优点"><a href="#4-其他优点" class="headerlink" title="4.其他优点"></a>4.其他优点</h3><p>(1). 请求的同一控制，保罗设置权限、过滤规则等；</p><p>(2). 区分动态和静态可缓存内容；</p><p>(3). 实现负载均衡，内部可以采用多台服务器来组成服务器集群，外部还是可以采用一个地址访问；</p><p>(4). 解决Ajax跨域问题；</p><p>(5). 作为真实服务器的缓冲，解决瞬间负载量大的问题；</p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-反向代理&quot;&gt;&lt;a href=&quot;#1-反向代理&quot; class=&quot;headerlink&quot; title=&quot;1. 反向代理&quot;&gt;&lt;/a&gt;1. 反向代理&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1-概念&quot;&gt;&lt;a href=&quot;#1-1-概念&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="高可用" scheme="http://yoursite.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix</title>
    <link href="http://yoursite.com/2019/07/16/Hystrix/"/>
    <id>http://yoursite.com/2019/07/16/Hystrix/</id>
    <published>2019-07-16T11:27:51.000Z</published>
    <updated>2019-07-16T13:43:40.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>分布式系统经常会出现某个基础服务不可用造成整个系统不可用的情况，这种现象称为服务雪崩效应。为了应对服务雪崩，一种常见的做法是手动服务降级，而 Hystrix 的出现，给我们提供了另一种选择。</p><h2 id="服务雪崩效应的定义"><a href="#服务雪崩效应的定义" class="headerlink" title="服务雪崩效应的定义"></a>服务雪崩效应的定义</h2><hr><p>服务雪崩效应是一种因 服务提供者 的不可用导致 服务调用 的不可用 ，逐渐放大的过程。</p><h2 id="服务雪崩效应形成的原因"><a href="#服务雪崩效应形成的原因" class="headerlink" title="服务雪崩效应形成的原因"></a>服务雪崩效应形成的原因</h2><hr><p>服务雪崩的参与者简化为 服务提供者 和 服务调用者 ， 并将服务雪崩产生的过程分为以下三个阶段来分析形成的原因：</p><ol><li>服务提供者不可用</li><li>重试加大流量</li><li>服务调用者不可用</li></ol><p>服务雪崩的每个阶段都可能由不同的原因造成，比如造成 服务不可用 的原因有：</p><ol><li>硬件故障</li><li>程序BUG</li><li>缓存击穿</li><li>用户大量请求</li></ol><p>硬件故障可能为硬件损坏造成的服务器户籍宕机，网络硬件故障造成的服务提供者的不可访问。</p><p>缓存击穿一般发生在缓存应用重启，所有缓存被清空时，以及短时间内大量缓存失效时。使请求直击后端，造成服务提供者超负荷运行。引起服务不可用。</p><p>而形成 重试加大流量 的原因有：</p><ol><li>用户重试</li><li>代码逻辑重试</li></ol><p>在服务提供者不可用后，用户由于忍受不练界面上长时间的等待，而不断刷新页面甚至提交表单。</p><p>服务调用端的会存在大量服务异常后的重试逻辑。</p><p>这些重试都会进一步加大请求流量。</p><p>最后，服务调用者不可用 产生的主要原因是：</p><ol><li>同步等待造成的资源耗尽</li></ol><p>当服务调用者使用同步调用时，会产生大量的等待线程占用系统资源，一旦线程资源被耗尽，服务调用这提供的服务也将处于不可用状态，于是服务雪崩效应产生了。</p><h2 id="服务雪崩的硬怼策略"><a href="#服务雪崩的硬怼策略" class="headerlink" title="服务雪崩的硬怼策略"></a>服务雪崩的硬怼策略</h2><hr><p>针对造成服务雪崩的不同原因，可以使用不同的硬怼策略：</p><ol><li>流量控制</li><li>改进缓存模式</li><li>服务自动扩容</li><li>服务调用者降级服务</li></ol><p>流量控制的具体措施包括：</p><ol><li>网关限流</li><li>用户交互限流</li><li>关闭重试</li></ol><p>因为Nginx的高性能，目前一线互联网公司大量采用 Nginx + Lua 的网关进行流量控制，由此而来的OpenResty（一个可伸缩的基于Nginx的Web平台）也越来越热门</p><p>用户交互限流的具体措施有：</p><ol><li>采用加载动画，提高用户的忍耐等待时间。</li><li>提交按钮添加强制等待时间机制</li></ol><p>改进缓存模式的措施包括：</p><ol><li>缓存预加载</li><li>同步改为异步刷新</li></ol><p>服务自动扩容 的措施主要有：</p><ol><li>AWS 的auto scaling</li></ol><p>服务调用这降级服务 的措施包括：</p><ol><li>资源隔离</li><li>对依赖服务进行分类</li><li>不可用服务的调用快速失败</li></ol><p>资源隔离主要是对调用服务的线程池进行隔离。</p><p>我们根据集体业务，将依赖服务分为：强依赖和弱依赖。强依赖服务不可用会导致当前业务中止，而若依赖服务的不可用不会导致当前业务的中止。</p><p>不可用服务的调用快速失败一般通过  超时机制，熔断器 和 熔断后的 降级方法 来实现。</p><h2 id="使用-Hystrix-预防服务雪崩"><a href="#使用-Hystrix-预防服务雪崩" class="headerlink" title="使用 Hystrix 预防服务雪崩"></a>使用 Hystrix 预防服务雪崩</h2><hr><p>Hystrix 的中文含义是豪猪，因其背上长满了刺，而拥有自我保护能力。Netflix 的Hystrix 是一个帮助解决分布式系统交互时潮湿处理和容错的类库，它同样拥有保护系统的能力。</p><p>Hystrix 的设计原则包括：</p><ol><li>资源隔离</li><li>熔断器</li><li>命令模式</li></ol><p>资源隔离</p><p>货船为了进行防治漏水和火灾的扩散，会将货仓分隔为多个。</p><p>这种资源隔离减少风险的方式被称为:Bulkheads(舱壁隔离模式). </p><p>Hystrix 将同样的模式运用到了服务调用者上。</p><p>在一个高度服务化的系统中，我们实现的一个业务逻辑通常会依赖多个服务，比如：商品详情展示服务会依赖商品服务，价格服务，商品评论服务。</p><p>调用三个依赖服务会共享商品详情服务的线程池，如果其中的商品评论服务不可用，就会出现线程池里所有线程都因等待响应而被阻塞，从而造成服务雪崩。</p><p>Hystrix 通过将每个依赖服务分配独立的线程池进行资源隔离，从而避免服务雪崩。当评论服务不可用时，即使商品服务独立分配的20个线程全部处于同步等待状态，也不会影响其他依赖服务的调用。</p><h3 id="熔断器模式"><a href="#熔断器模式" class="headerlink" title="熔断器模式"></a>熔断器模式</h3><p>熔断器模式定义了熔断器开关相互转换的逻辑：</p><p>[<img src="http://img2.imgtn.bdimg.com/it/u=2363554541,2470999969&fm=26&gp=0.jpg" alt="img"></p><p>服务的健康状态 = 请求失败数 / 请求总数</p><p>熔断器开关由关闭到打开的状态转换时通过当前服务健康状况和设定阀值比较决定的。</p><ol><li>档熔断器开关关闭时，请求被允许通过熔断器。如果当前健康状况高于阀值，开关继续保持关闭。如果当前健康状况低于设定阀值，开关则切换为打开状态。</li><li>当熔断器开关打开时，请求被禁止通过。</li><li>当熔断器开关处于打开状态，经过一段时间后，熔断器会自动进入半开状态，此时熔断器只允许一个请求通过，当该请求调用成功时，熔断器恢复到关闭状态。若该请求失败，熔断器继续保持打开状态，接下来的请求被禁止通过。</li></ol><p>熔断器的开关能保证服务调用者在调用异常服务时，快速返回结果，避免大量的同步等待，并且熔断器能在一段时间继续侦测请求执行结果，提供恢复服务调用的可能。</p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>Hystrix 使用命令模式（继承HystrixCommand类）来包裹具体的服务调用逻辑（run()方法），并在命令模式中添加了服务调用失败后的降级逻辑（getFallback）。</p><p>同时我们在Command的构造方法中可以定义当前服务线程池和熔断器的相关参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service1HystrixCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">Response</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Service1 service;</span><br><span class="line">  <span class="keyword">private</span> Request request;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Service1HystrixCommand</span><span class="params">(Service1 service, Request request)</span></span>&#123;</span><br><span class="line">    supper(</span><br><span class="line">      Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"ServiceGroup"</span>))</span><br><span class="line">          .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"servcie1query"</span>))</span><br><span class="line">          .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">"service1ThreadPool"</span>))</span><br><span class="line">          .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()</span><br><span class="line">            .withCoreSize(<span class="number">20</span>))<span class="comment">//服务线程池数量</span></span><br><span class="line">          .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()</span><br><span class="line">            .withCircuitBreakerErrorThresholdPercentage(<span class="number">60</span>)<span class="comment">//熔断器关闭到打开阈值</span></span><br><span class="line">            .withCircuitBreakerSleepWindowInMilliseconds(<span class="number">3000</span>)<span class="comment">//熔断器打开到关闭的时间窗长度</span></span><br><span class="line">      ))</span><br><span class="line">      <span class="keyword">this</span>.service = service;</span><br><span class="line">      <span class="keyword">this</span>.request = request;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Response <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service1.call(request);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Response <span class="title">getFallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Response.dummy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用了Command模式构建了服务对象之后，服务便拥有了熔断器和线程池的功能。</p><p><img src="https://img-blog.csdn.net/20171030152127639?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFveWVxaXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><h2 id="Hystrix-的内部处理逻辑"><a href="#Hystrix-的内部处理逻辑" class="headerlink" title="Hystrix 的内部处理逻辑"></a>Hystrix 的内部处理逻辑</h2><hr><p><img src="https://img-blog.csdn.net/20171030152140596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFveWVxaXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><ol><li>构造 Hystrix 的 Command 对象，调用执行方法；</li><li>Hystrix 检查当前服务的熔断开关是否开启，若开启，则执行降级服务getFallback()方法；</li><li>若熔断器开关关闭，则 Hystrix 检查当前服务的线程池是否能够收到新的请求，若超过线程池已满执行降级服务 getFallback()方法；</li><li>若线程池接收请求，则 Hystrix 开始执行服务调用具体逻辑 run()方法；</li><li>若服务执行失败，则执行降级服务 getFallback() 方法，并将执行结果上报给 Metrics 更新服务健康状况；</li><li>如果服务执行超时，则执行降级服务 getFallback() 方法，并将执行结果上报给 Metrics 更新服务健康状况；</li><li>若服务执行成功，返回正常结果；</li><li>若服务降级方法 getFallback() 执行成功，则返回降级结果；</li><li>若服务降级方法 getFallback() 执行失败，则抛出异常。</li></ol><h2 id="Hystrix-Metrics-的实现"><a href="#Hystrix-Metrics-的实现" class="headerlink" title="Hystrix Metrics 的实现"></a>Hystrix Metrics 的实现</h2><hr><p>Hystrix 在这些版本中的使用自定义的滑动窗口数据结构来记录当前时间窗的各种事件（成功，失败，超时，线程池拒绝等）的计数。</p><p>事件产生时，数据结构根据当前时间确定使用旧桶还是创建新桶来计数，并在桶中对计数器进行修改。</p><p>这些修改是多线程并发执行的，代码中有不少加锁操作，逻辑较为复杂。</p><p><img src="https://img-blog.csdn.net/20171030152154384?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFveWVxaXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><strong>1.5之后的滑动窗口实现</strong></p><p>Hystrix 在这些版本红开始使用 JavaRX 的Observable.window() 实现滑动窗口，JavaRX 的 window 使用后台线程创建新桶，避免了并发创建桶的问题。</p><p>同时 JavaRX 的单线程无所特性也保证了计数变更时的线程安全。从而使代码更加简洁。</p><p>使用 JavaRX 的 window 方法实现一个简易滑动窗口 Metrics ，短短几行代码便能完成统计功能，足以证明 JavaRX 的强大：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeWindowTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  Observable&lt;Integer&gt; source = Observable.interval(<span class="number">50</span>, TimeUnit.MILLISECONDS).map(i -&gt; RandomUtils.nextInt(<span class="number">2</span>));</span><br><span class="line">  source.window(<span class="number">1</span>, TimeUnit.SECONDS).subscribe(window -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span>[] metrics = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    window.subscribe(i -&gt; metrics[i]++,</span><br><span class="line">      InternalObservableUtils.ERROR_NOT_IMPLEMENTED,</span><br><span class="line">      () -&gt; System.out.println(<span class="string">"窗口Metrics:"</span> + JSON.toJSONString(metrics)));</span><br><span class="line">  &#125;);</span><br><span class="line">  TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>通过使用Hystrix,我们能方便的防止雪崩效应, 同时使系统具有自动降级和自动恢复服务的效果.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hystrix&quot;&gt;&lt;a href=&quot;#Hystrix&quot; class=&quot;headerlink&quot; title=&quot;Hystrix&quot;&gt;&lt;/a&gt;Hystrix&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="springcloud" scheme="http://yoursite.com/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>Eureka</title>
    <link href="http://yoursite.com/2019/07/16/Eureka/"/>
    <id>http://yoursite.com/2019/07/16/Eureka/</id>
    <published>2019-07-16T09:34:41.000Z</published>
    <updated>2019-07-16T11:17:20.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka的工作原理"><a href="#Eureka的工作原理" class="headerlink" title="Eureka的工作原理"></a>Eureka的工作原理</h1><hr><h3 id="1、Eureka-简介"><a href="#1、Eureka-简介" class="headerlink" title="1、Eureka 简介"></a>1、Eureka 简介</h3><hr><p>Eureka 是 Netflix 出品的用于实现微服务注册和发现的工具。 Spring Cloud 集成了 Eureka ，并提供了开箱即用的支持。其中，Eureka 又可以细分为 Eureka Server 和 Eureka Client。</p><h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h2><hr><p>服务启动后向 Eureka 注册，Eureka Server 会将注册信息向其他 Eureka Server 进行同步，当服务消费者要调用服务提供者，则向服务注册中心获取服务提供者地址，然后会将服务提供者地址缓存在本地，下次再调用时，则直接从本地缓存中取，完成一次调用。</p><p>当服务注册中心 Eureka Server 检测到服务提供者因为宕机、网络原因不可用时，则在服务注册中心将服务置为 DOWN 状态，并把当前服务提供者状态向订阅者发布，订阅过的服务消费者更新本地缓存。</p><p>服务提供者在启动后，周期性（默认30秒）向 Eureka Server 发送心跳，以证明当前服务是可用状态。Eureka Server 在一定的时间（默认90秒）未收到客户端的心跳，则认为服务宕机，注销该实例。</p><h2 id="2-Eureka-的自我保护机制"><a href="#2-Eureka-的自我保护机制" class="headerlink" title="2. Eureka 的自我保护机制"></a>2. Eureka 的自我保护机制</h2><hr><p>在默认配置中，Eureka Server 在默认 90s 没有得到客户端的心跳，则注销该实例，但是往往因为微服务跨进程调用，网络通信往往会面临着各种问题，比如微服务状态正常，但是因为网络分区故障时，Eureka Server 注销服务实例则会让大部分微服务不可用，这很危险，因为服务明明没有问题。</p><p>为了解决这个问题，Eureka 有自我保护机制，通过在 Eureka Server 配置如下参数，可启动保护机制（默认为开启）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.server.enable-self-preservation=true</span><br></pre></td></tr></table></figure><p>它的原理是，当 Eureka Server 节点在短时间内丢失过多的客户端时（可能发送了网络故障），那么这个节点将会进入自我保护模式，不再注销任何微服务，当网络故障恢复后，该节点会自动退出自我保护模式。</p><p>自我保护模式的架构哲学是 <em>宁可放过一个，绝不可错杀一千</em></p><h2 id="3-作为服务注册中心，Eureka-比-Zookeeper-好在哪里"><a href="#3-作为服务注册中心，Eureka-比-Zookeeper-好在哪里" class="headerlink" title="3.作为服务注册中心，Eureka 比 Zookeeper 好在哪里"></a>3.作为服务注册中心，Eureka 比 Zookeeper 好在哪里</h2><hr><p>注明的CAP理论指出，一个分布式系统不可能同时满足C(一致性)、A（可用性）和P（分区容错性）。由于分区容错性是在分布式系统中必须要保证的。因此我们只能在A和C之间进行权衡。在此 Zookeeper 保证的是CP ，而 Eureka 保证的是AP。</p><h3 id="3-1-Zookeeper-保证CP"><a href="#3-1-Zookeeper-保证CP" class="headerlink" title="3.1  Zookeeper 保证CP"></a>3.1  Zookeeper 保证CP</h3><p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接 DOWN 掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是Zookeeper会出现这样一种情况，当 master 节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举 leader 的时间太长，30 ~ 120 s，且选举期间整个Zookeeper集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得 Zookeeper 集群失去 master 节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用时不能容忍的。</p><h3 id="3-2-Eureka-保证-AP"><a href="#3-2-Eureka-保证-AP" class="headerlink" title="3.2 Eureka 保证 AP"></a>3.2 Eureka 保证 AP</h3><p>Eureka在设计之初就已经考虑了这一点，优先保证可用性。Eureka 各个节点都是平等的，几个节点挂点都不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而 Eureka的客户端在向某个 Eureka 注册时如果发现连接失败，则会自动切换至其他节点，只要有一台 Eureka还在，就能保证注册服务可用（保证可用性），只不过查到的信息可能不是最新的（不保证强一致性）。除此之外，Eureka 还有一种自我保护机制，如果在 15 分钟内超过 85% 的节点都没有正常的心跳，那么 Eureka 就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ol><li>Eureka 不再从注册列表中移除因为长时间没收到心跳而应该过的服务；</li><li>Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点依然可用）；</li><li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中。</li></ol><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><hr><p>Eureka 作为单纯的服务注册中心来说要比 Zookeeper 更加 “专业”，因为注册服务更重要的是可用性，我们可以接收短期内达不到一致性的情况。不过 Eureka 目前版本的实现是基于 Servlet 的 Java Web应用，它的权限性能肯定会收到影响。不过可以使用Spring Cloud Security 或者Shiro 来弥补这个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Eureka的工作原理&quot;&gt;&lt;a href=&quot;#Eureka的工作原理&quot; class=&quot;headerlink&quot; title=&quot;Eureka的工作原理&quot;&gt;&lt;/a&gt;Eureka的工作原理&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;1、Eureka-简介&quot;&gt;&lt;a href=&quot;#1
      
    
    </summary>
    
    
      <category term="springcloud" scheme="http://yoursite.com/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>GC</title>
    <link href="http://yoursite.com/2019/07/11/GC/"/>
    <id>http://yoursite.com/2019/07/11/GC/</id>
    <published>2019-07-11T03:38:13.000Z</published>
    <updated>2019-07-11T13:26:48.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GC回收机制"><a href="#GC回收机制" class="headerlink" title="GC回收机制"></a>GC回收机制</h1><hr><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><hr><p>垃圾收集 Garbage Collection 被称为“ <strong>GC</strong> ”。</p><p>在JVM中，内存模型大致分为五块，PC计数器、栈、堆、方法区、本地方法栈，其中程序计数器、栈、本地方法栈都是跟随线程而生，栈随着方法的进入和退出做出相应的入栈和出站操作，实现了自动的内存清理，因此，<u>内存垃圾回收主要集中于Java堆和方法区</u>中，在程序运行期间，这部分内从的分配和使用都是动态的。</p><h2 id="对象的回收"><a href="#对象的回收" class="headerlink" title="对象的回收"></a>对象的回收</h2><hr><p>在堆中存放着Java中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还 “ 存活 ”  着，哪些已经 “ 死去 ” （即不可能再被任何途径使用的对象）。</p><p>判断对象是否存活一般的几种方式：</p><h3 id="1-引用计数"><a href="#1-引用计数" class="headerlink" title="1.  引用计数"></a>1.  引用计数</h3><hr><p>​        业界内大多是这样描述这个算法的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p><p>​        客观地说，引用计数算法（<em>Reference Counting</em>）的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法。<strong>但是在主流的Java虚拟机里面没有选用引用计数算法进行内存管理</strong>，其中最主要的原因是它很难解决对象之间相互循环引用的问题。</p><h3 id="2-可达性分析"><a href="#2-可达性分析" class="headerlink" title="2. 可达性分析"></a>2. 可达性分析</h3><hr><p>在主流的商用程序语言（Java、C#等）的主流实现中，都是通过可达性分析（<em>Reachability Analysis</em>）来判定对象是否存活的。这个算法的基本思路就是通过一系列的称为 “ GC Roots ” 的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots 没有任何引用链相连（用图论的话来说，就是从GC Roots 到这个对象不可达）时，则证明此对象是不可用的。如图GC-1所示 ，对象 object5、object6、object7虽然互相有关联，但是它们到 GC Roots 是不可达的，所以它们将会被判定为是可回收的对象。</p><p><img src="%5Cimgs%5CGC1-1.png" alt="这是GC1-1，描述的是引用链"></p><p>在 Java语言中，可作为 GC Roots 对象的包括下面几种：</p><ol><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>方法区中类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中 JNI (即一般说的Native方法)引用的对象。</li></ol><h2 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h2><hr><p>无论是通过引用计数算法判断对象的饮用数量，还是通过可达性分析算法判断对象引用链是否可达，判断对象是否存活都与 “ 引用 ” 有关。在JDK1.2以前，Java中的引用的定义很传统：如果reference 类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭义，一个对象在这种定义下只有被引用或者没有被应用两种状态们对于如何描述这些</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GC回收机制&quot;&gt;&lt;a href=&quot;#GC回收机制&quot; class=&quot;headerlink&quot; title=&quot;GC回收机制&quot;&gt;&lt;/a&gt;GC回收机制&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/07/08/Nginx/"/>
    <id>http://yoursite.com/2019/07/08/Nginx/</id>
    <published>2019-07-08T03:24:34.344Z</published>
    <updated>2019-07-08T03:24:34.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><hr><p>Nginx 5w/s 并发</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><hr><p>Nginx（）是一个高性能的HTTP和反向代理web服务器，俄罗斯的工程师设计开发的。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><hr><ol><li>高并发：支持5W甚至更多的并发</li><li>内存消耗小，在3W并发下，开启10个进程，内存消耗不到200M</li><li>可以做HTTP反向代理、可以完成负载均衡</li><li>Nginx启动了安全检查，后台某台代理的机器宕机后，自动剔除，不影响访问。（心跳检测机制）</li><li>通过cache插件，可以完成缓存操作</li><li>动静分离</li></ol><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><hr><p>概念：使用代理服务器来接收Internet网上的请求，然后将请求转发给内部的web服务器，并且获取到网络上服务器的响应的内存，再返回Internet网上的用户，此时中间服务器就称为代理服务器，这个过程就是反向代理。</p><p>作用：</p><ol><li>作为内容服务器本身。</li><li>内容服务器集群的负载均衡器。</li></ol><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><hr><p>概念：    </p><p>​        为了保证每台tomcat的请求负载压力均衡，我们可以使用Nginx的算法来完成负载均衡，在生产环境中，也可以根据tomcat的负载情况来自动切换到空闲的tomcat服务器完成请求处理。</p><h4 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h4><hr><h4 id="轮询算法"><a href="#轮询算法" class="headerlink" title="轮询算法"></a>轮询算法</h4><hr><ol><li>Nginx的upstream （代理对象）支持的算法：<ol><li>轮询：每一个请求按照时间，均匀分配到不同的web服务器。web服务器宕机，自动剔除当前服务器，轮询剩下的服务器。</li><li>权重：you can you up 通过配置权重，指定轮询的几率，权重和访问率成正比，web服务器性能不均的情况。</li><li>ip_hash算法：根据每个访问的ip_hash值来进行分配，每个用户固定访某一台服务器。</li><li>自定义轮询算法</li></ol></li></ol><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><hr><p>动静分离指的是通过Nginx来处理图片、静态网页和一些css样式，tomcat负责处理jsp、servlet、controller动态资源</p><p>如果他要访问静态资源，不会访问到tomcat，直接Nginx响应，</p><p>Nginx处理静态资源的效率远远高于tomcat、而tomcat擅长处理动态资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Nginx 5w/s 并发&lt;/p&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux笔记</title>
    <link href="http://yoursite.com/2019/07/01/Linux%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/01/Linux笔记/</id>
    <published>2019-07-01T11:43:01.000Z</published>
    <updated>2019-07-01T11:43:39.544Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Shiro</title>
    <link href="http://yoursite.com/2019/06/29/Shiro%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2019/06/29/Shiro踩坑/</id>
    <published>2019-06-29T01:29:30.000Z</published>
    <updated>2019-06-29T02:31:36.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shiro-踩坑"><a href="#Shiro-踩坑" class="headerlink" title="Shiro 踩坑"></a>Shiro 踩坑</h1><hr><h2 id="1、权限时好时不好的"><a href="#1、权限时好时不好的" class="headerlink" title="1、权限时好时不好的"></a>1、权限时好时不好的</h2><p>在设置Realms的时候，你使用的是HashMap，因为HashMap是无序的，所以容易造成这种情况。</p><p>解决方案：将HashMap替换为LinkedHashMap，他是有序的，顺序是你PUT的顺序。</p><h2 id="2、为何User拥有Admin的权限呢？"><a href="#2、为何User拥有Admin的权限呢？" class="headerlink" title="2、为何User拥有Admin的权限呢？"></a>2、为何User拥有Admin的权限呢？</h2><p>这是Shiro进行认证后，会将一些认证信息保存在Cookie中，Shiro“误会”了你们的关系，所以出现了这种情况。</p><p>解决方案：在进行logout的时候，清除缓存。相关信息查看LogoutFilter的用法</p><h2 id="3、用户名密码都正确为什么认证不通过？"><a href="#3、用户名密码都正确为什么认证不通过？" class="headerlink" title="3、用户名密码都正确为什么认证不通过？"></a>3、用户名密码都正确为什么认证不通过？</h2><p>这是Shiro的认证策略问题，详情请查看我的另一篇博客，有关于多Realm认证策略</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Shiro-踩坑&quot;&gt;&lt;a href=&quot;#Shiro-踩坑&quot; class=&quot;headerlink&quot; title=&quot;Shiro 踩坑&quot;&gt;&lt;/a&gt;Shiro 踩坑&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1、权限时好时不好的&quot;&gt;&lt;a href=&quot;#1、权限时好时不好的&quot; cl
      
    
    </summary>
    
    
      <category term="Shiro" scheme="http://yoursite.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>搭建共享单车项目框架</title>
    <link href="http://yoursite.com/2019/06/20/%E6%90%AD%E5%BB%BA%E5%85%B1%E4%BA%AB%E5%8D%95%E8%BD%A6%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/06/20/搭建共享单车项目框架/</id>
    <published>2019-06-20T15:16:21.000Z</published>
    <updated>2019-06-29T02:37:45.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h2><hr><p>使用 <strong>Spring Boot</strong> 框架</p><p><strong>Spring Boot</strong>  整合 <strong>Mybatis</strong></p><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.enc_pri<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generator.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、配置application-yml"><a href="#2、配置application-yml" class="headerlink" title="2、配置application.yml"></a>2、配置application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># server 设置端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8090</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line">  <span class="comment"># 设置应用名称</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">mama-bike</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line">  <span class="comment"># 设置应用环境 dev 是开发环境  pro 是生产环境 test 测试环境 </span></span><br><span class="line">  <span class="comment"># 这里会自动进行关联application-dev.yml下的配置</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="comment"># 设置阿里巴巴 德鲁伊（Druid） 连接池</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line">    <span class="comment"># druid</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    initialSize:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">select</span> <span class="string">'x'</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    maxOpenPreparedStatements:</span> <span class="number">20</span></span><br><span class="line"><span class="comment"># mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment"># 配置Mapper文件的位置</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:top/capiudor/**/**.xml</span></span><br><span class="line">  <span class="comment"># 配置别名</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="attr">classpath:top.capiudor.**.entity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log  加载日志配置文件 </span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  config:</span> <span class="attr">classpath:logback-spring.xml</span></span><br></pre></td></tr></table></figure><h3 id="3、配置application-dev-yml"><a href="#3、配置application-dev-yml" class="headerlink" title="3、配置application-dev.yml"></a>3、配置application-dev.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">     url:</span> <span class="attr">jdbc:mysql://localhost:3306/yourDataBaseName?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line"><span class="attr">     username:</span> <span class="string">your</span> <span class="string">connection</span> <span class="string">name</span></span><br><span class="line"><span class="attr">     password:</span> <span class="string">your</span> <span class="string">connection</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><h3 id="4、替换阿里巴巴-FastJson"><a href="#4、替换阿里巴巴-FastJson" class="headerlink" title="4、替换阿里巴巴  FastJson"></a>4、替换阿里巴巴  FastJson</h3><p>Spring Boot 默认使用了Jackson 作为JSON解析器，为什么我们还要使用fastjson呢？</p><p>​    1、fastjson 效率比 jackson 高很多</p><p>​    2、FastJson 用于 memacache 缓存</p><p>我们需要设置一个优先级把它更高的 HttpMessageConverter (注意：并不是覆盖了，只是优先级更高了)</p><p>操作：</p><p>​    一般，我们约定俗成，通用的Bean 在 <strong>Application.java</strong> 中配置你要配置 <strong>Bean</strong> ，如果需要配置的Bean较多，使用注解@Configuration 注解来设置一个注解类。当前我使用一个简单的配置方式</p><p><strong>Application.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpMessageConverters <span class="title">fastJsonHttpMessageConverters</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FastJsonHttpMessageConverter fastConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">    HttpMessageConverter&lt;?&gt; converter = fastConverter;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HttpMessageConverters(converter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、Mybatis-逆向工程"><a href="#5、Mybatis-逆向工程" class="headerlink" title="5、Mybatis 逆向工程"></a>5、Mybatis 逆向工程</h3><p>使用 maven </p><p>自动生成策略：<strong>generator.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--classPathEntry:数据库的JDBC驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span></span></span><br><span class="line"><span class="tag">            <span class="attr">location</span>=<span class="string">"H:\mvnRepo\mysql\mysql-connector-java\5.1.46\mysql-connector-java-5.1.46.jar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MysqlTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注意这里面的顺序确定的，不能随变更改 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义的分页插件 &lt;plugin type="com.deppon.foss.module.helloworld.shared.PaginationPlugin"/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 可选的（0 or 1） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注释生成器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 必须的（1 required） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/mama-bike"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 可选的（0 or 1） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 类型转换器或者加类型解析器 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer true，把JDBC DECIMAL 和</span></span><br><span class="line"><span class="comment">            NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 必须的（1 required） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- java模型生成器 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:自动生成代码的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"top.capiudor.mamabike.user.entity"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"H:\IdeaProjects\mamabike\src\main\java"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- TODO enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 必须的（1 required） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- map xml 生成器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"top.capiudor.mamabike.user.dao"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"H:\IdeaProjects\mamabike\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 可选的（0 or 1） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mapper 或者就是dao接口生成器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"top.capiudor.mamabike.user.dao"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"H:\IdeaProjects\mamabike\src\main\java"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 必须的（1...N） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- pojo 实体生成器 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- schema即为数据库名 可不写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>  <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">enableInsert</span>=<span class="string">"true"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 忽略字段 可选的（0 or 1） --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;ignoreColumn column="is_use" /&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;columnOverride column="city_code" jdbcType="VARCHAR" /&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>maven 命令： <code>mybatis-generator:generate -e</code></p><p>执行即可生成bean 以及 对应的 mapper接口和mapper文件 ，注意： SpringBoot 2.x以后的版本，需要给Mapper接口添加注解  <strong>@Mapper</strong> 否则编译不通过</p><h3 id="6、整合日志系统logback"><a href="#6、整合日志系统logback" class="headerlink" title="6、整合日志系统logback"></a>6、整合日志系统logback</h3><p>接下来配置格式化日志输出：</p><p>​    <strong>logback-spring.xml</strong> （PS：日志文件可以使用 logback.xml 也可以使用 logback-spring.xml。区别：logback是日志系统启动不经过Springboot容器，而springboot官方推荐使用logback-spring.xml的形式命名，可以使用SpringBoot提供的强大功能：由SpringBoot容器来启动日志，可选择不同的运行环境，详情自行百度）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出文件的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/logs/mamabike/"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;H:mm&#125;========= %-5level ========= [%logger&#123;16&#125;] %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"normalLog"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/web.normal.%d&#123;yyyy-MM-dd&#125;.log</span><br><span class="line"><span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125;--------&gt; [%thread]--------&gt; %-5level %logger&#123;16&#125; - %msg%n</span><br><span class="line"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125;===== [%thread]===== %-5level %logger&#123;16&#125; - %msg%n</span><br><span class="line"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"errorLog"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/web.error.%d&#123;yyyy-MM-dd&#125;.log</span><br><span class="line"><span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;16&#125; - %msg%n</span><br><span class="line"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"top.capiudor.mamabike"</span> <span class="attr">level</span>=<span class="string">"debug"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"normalLog"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"errorLog"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不需要引入任何依赖：</p><p>​    原因：如下图所示，SpringBoot已经帮我们将Spring的 Commons-logging“偷梁换柱”，所有的依赖都在里面，默认采用slf4j的抽象层来处理日志，默认使用logback实现日志系统。</p><p>​    <img src="/imgs/mamabike01_01_dependenciesView.png" alt="这是一个 Spring Boot starter 的依赖模型图"></p><h3 id="7、测试工程"><a href="#7、测试工程" class="headerlink" title="7、测试工程"></a>7、测试工程</h3><p>编写Service文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Controller文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = userMapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试Mybatis是否成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = MamabikeApplication.class,webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MamabikeApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TestRestTemplate restTemplate;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"userServiceImpl"</span>)</span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LocalServerPort</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String result = restTemplate.getForObject(<span class="string">"/user/hello"</span>, String.class);</span><br><span class="line">       System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">Logger logger = LoggerFactory.getLogger(MamabikeApplicationTests.class);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">userService.login();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(<span class="string">"出错了"</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果contextLoads()显示如下返回的字符串信息，则证明SpringBoot 整合Mybatis成功</p><p><code>{&quot;enableFlag&quot;:1,&quot;id&quot;:1,&quot;mobile&quot;:&quot;152****2151&quot;,&quot;nickName&quot;:&quot;capiudor&quot;,&quot;verifyFlag&quot;:1}</code></p><p>如果 testUserService() 显示 Error （因为我的mobile字段不允许为空），并将日志输出到文件中（路径：你项目的根目录下的，我的在当前项目根目录下的logs/mamabike里面） 则证明成功 </p><p>转载至 【<a href="http://coder520.com/" target="_blank" rel="noopener">码码在线</a>】</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目框架&quot;&gt;&lt;a href=&quot;#项目框架&quot; class=&quot;headerlink&quot; title=&quot;项目框架&quot;&gt;&lt;/a&gt;项目框架&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;使用 &lt;strong&gt;Spring Boot&lt;/strong&gt; 框架&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring 
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Redis引发的血案</title>
    <link href="http://yoursite.com/2019/06/20/SpringBoot%E6%95%B4%E5%90%88Redis%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/"/>
    <id>http://yoursite.com/2019/06/20/SpringBoot整合Redis引发的血案/</id>
    <published>2019-06-20T08:59:09.000Z</published>
    <updated>2019-06-20T09:00:09.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合Redis引发的血案"><a href="#SpringBoot整合Redis引发的血案" class="headerlink" title="SpringBoot整合Redis引发的血案"></a>SpringBoot整合Redis引发的血案</h1><hr><h2 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h2><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ==============================整合redis================================= --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  用于Redis数据库的连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ==============================整合redis================================= --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、整合配置-application-properties-（PS：也可以使用配置类的方式使用，自行百度）"><a href="#2、整合配置-application-properties-（PS：也可以使用配置类的方式使用，自行百度）" class="headerlink" title="2、整合配置 application.properties （PS：也可以使用配置类的方式使用，自行百度）"></a>2、整合配置 application.properties （PS：也可以使用配置类的方式使用，自行百度）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># redis config</span><br><span class="line">#  data index (default value = 0)</span><br><span class="line">spring.redis.database=0</span><br><span class="line"># current redis host  , The official version is Linux</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line"># redis port (default 6379)</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"># redis password (default null)</span><br><span class="line">spring.redis.password=</span><br><span class="line"># redis max active (default 8)</span><br><span class="line">spring.redis.lettuce.pool.max-active=8</span><br><span class="line"># redis max wait time (default -1 not wait)</span><br><span class="line">spring.redis.lettuce.pool.max-wait=-1</span><br><span class="line">spring.redis.lettuce.pool.max-idle=8</span><br><span class="line">spring.redis.lettuce.pool.min-idle=0</span><br></pre></td></tr></table></figure><h3 id="3、开启Redis缓存，设置主键增长策略"><a href="#3、开启Redis缓存，设置主键增长策略" class="headerlink" title="3、开启Redis缓存，设置主键增长策略"></a>3、开启<strong>Redis</strong>缓存，设置主键增长策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 开启redis 缓存。设置主键增长策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> capiudor</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(target.getClass().getName());</span><br><span class="line">sb.append(method.getName());</span><br><span class="line"><span class="keyword">for</span> (Object object : params) &#123;</span><br><span class="line">sb.append(object.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、测试类"><a href="#4、测试类" class="headerlink" title="4、测试类"></a>4、测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> com.woniuxy.three.pms.demo.Springboot01Application;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheRedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"keyname"</span>, <span class="string">"capiudor"</span>);</span><br><span class="line">String value = (String) redisTemplate.opsForValue().get(<span class="string">"keyname"</span>);</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果能够在下方打印  <code>capiudor</code> 即可证明整合redis成功</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><hr><h3 id="1、SpringBootTest启动"><a href="#1、SpringBootTest启动" class="headerlink" title="1、SpringBootTest启动"></a>1、SpringBootTest启动</h3><p><strong>报错信息</strong>：找不到</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16:34:22.031 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [cache.CacheRedisTest]</span><br></pre></td></tr></table></figure><p>解决方案：在测试类的@SpringBootTest加参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,classes = &#123;Application.class&#125;)</span><br></pre></td></tr></table></figure><p>起初我只加上了classes=Application.class，结果启动的时候，报了下面的错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: javax.websocket.server.ServerContainer not available</span><br></pre></td></tr></table></figure><p>原因就是因为这个没有启动容器，加载不到tomcat，有人说使用@WebMvcTest()注解来代替@SpringBootTest，对不起告辞！加载不到，我就使用配置环境，告诉这个SpringJunitTest使用的环境是web环境就有了如上配置</p><h3 id="2、Redis无法使用set命令"><a href="#2、Redis无法使用set命令" class="headerlink" title="2、Redis无法使用set命令"></a>2、Redis无法使用set命令</h3><p><strong>报错信息</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs <span class="keyword">for</span> details about the error.</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config set stop-writes-on-bgsave-error no</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot整合Redis引发的血案&quot;&gt;&lt;a href=&quot;#SpringBoot整合Redis引发的血案&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合Redis引发的血案&quot;&gt;&lt;/a&gt;SpringBoot整合Redis引发的
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>短信接口</title>
    <link href="http://yoursite.com/2019/06/20/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2019/06/20/短信接口/</id>
    <published>2019-06-20T06:23:30.000Z</published>
    <updated>2019-06-20T06:26:33.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="短信设计"><a href="#短信设计" class="headerlink" title="短信设计"></a>短信设计</h1><p>1、是否需要考虑安全</p><p>2、是否需要考虑回调</p><p>3、是否需要考虑类型</p><h2 id="短信通讯流程"><a href="#短信通讯流程" class="headerlink" title="短信通讯流程"></a>短信通讯流程</h2><hr><p>前台接口通过调用接口发起短信通知接口，将信息组织为json 格式报文发往后台，后台处理报文数据，发往某短信提供方，厂商接收后实时返回短信发送状态。这是是厂商将短信内容发往相应的客户的手机，异步通知给我们平台，报告这次短信的发送最终状态。</p><h2 id="短信厂商提供的接口"><a href="#短信厂商提供的接口" class="headerlink" title="短信厂商提供的接口"></a>短信厂商提供的接口</h2><hr><p>短信下发接口（没有参数，静态的短信文字内容）</p><p>变量短信接口（HTTPS请求方式，同时支持不同变量的短信内容）</p><p>回送状态报告接口（即异步通知接口）</p><h2 id="1、安全性"><a href="#1、安全性" class="headerlink" title="1、安全性"></a>1、安全性</h2><hr><p>问题：倘若攻击者使用抓包工具，对我们的接口进行无限发送短信，造成的短信费用是斐然的。</p><p>解决：</p><ol><li>前端验证码（避免频繁发送）</li><li>黑名单（一个手机号超过一定次数拉入黑名单）</li><li>IP封停（一个IP频繁发送短信，拒绝该IP的请求）</li><li>提取Request中的信息，甄别是否为正常请求（头信息）</li></ol><h2 id="2、回调"><a href="#2、回调" class="headerlink" title="2、回调"></a>2、回调</h2><hr><p>问题：这个回调不影响你发短信，因为回调是已经完成了发送短信的操作，我们是否需要记录这个发送成功或者失败的信息。也就是说这个回调函数仅仅只是一个记录日志的作用</p><h2 id="3、类型"><a href="#3、类型" class="headerlink" title="3、类型"></a>3、类型</h2><hr><p>短信我们拿来干什么？</p><ol><li>手机注册验证码</li><li>手机登录验证码</li><li>重要的操作验证码（比如密码找回）</li><li>短信通知已处理的业务</li></ol><p>根据我们的需要来设计这个短信接口类型，根绝类型选择我们发送的模板以及参数（模板由我们自己设计，参数即是模板的变量）</p><h2 id="SpringBoot-整合短信接口（秒嘀云服务商）"><a href="#SpringBoot-整合短信接口（秒嘀云服务商）" class="headerlink" title="SpringBoot 整合短信接口（秒嘀云服务商）"></a>SpringBoot 整合短信接口（秒嘀云服务商）</h2><hr><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个依赖是提供处理常用的编码方法的工具类：</p><p>​    例如DES、SHA1、MD5、Base64，URL，Soundx等等。</p><p><strong>不可逆算法</strong></p><p><strong>1.MD5</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">DigestUtils.md5Hex(str);</span><br></pre></td></tr></table></figure><p><strong>2.SHA1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">DigestUtils.shaHex(str);</span><br></pre></td></tr></table></figure><p><strong>可逆算法</strong></p><p><strong>常规加密解密算法：BASE64</strong></p><p><strong>加密</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str= <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] b = Base64.encodeBase64(str.getBytes(), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(b));</span><br></pre></td></tr></table></figure><p><strong>解密</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"YWJj"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] b = Base64.decodeBase64(str.getBytes());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(b));</span><br></pre></td></tr></table></figure><h3 id="2、创建配置类"><a href="#2、创建配置类" class="headerlink" title="2、创建配置类"></a>2、创建配置类</h3><p><strong>Config.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * url前半部分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"https://api.miaodiyun.com/20150822"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开发者注册后系统自动生成的账号，可在官网登录后查看</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_SID = <span class="string">"请填写自己的Sid"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开发者注册后系统自动生成的TOKEN，可在官网登录后查看</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTH_TOKEN = <span class="string">"请填写自己的token"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应数据类型, JSON或XML</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESP_DATA_TYPE = <span class="string">"json"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woniuxy.three.pms.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * http请求工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造通用参数timestamp、sig和respDataType</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createCommonParam</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line">String timestamp = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 签名</span></span><br><span class="line">String sig = DigestUtils.md5Hex(Config.ACCOUNT_SID + Config.AUTH_TOKEN + timestamp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"&amp;timestamp="</span> + timestamp + <span class="string">"&amp;sig="</span> + sig + <span class="string">"&amp;respDataType="</span> + Config.RESP_DATA_TYPE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post请求</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment"> *            功能和操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment"> *            要post的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">post</span><span class="params">(String url, String body)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"url:"</span> + System.lineSeparator() + url);</span><br><span class="line">System.out.println(<span class="string">"body:"</span> + System.lineSeparator() + body);</span><br><span class="line"></span><br><span class="line">String result = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">OutputStreamWriter out = <span class="keyword">null</span>;</span><br><span class="line">BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置连接参数</span></span><br><span class="line">conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">conn.setReadTimeout(<span class="number">20000</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="comment">// 提交数据</span></span><br><span class="line">out = <span class="keyword">new</span> OutputStreamWriter(conn.getOutputStream(), <span class="string">"UTF-8"</span>);</span><br><span class="line">out.write(body);</span><br><span class="line">out.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取返回数据</span></span><br><span class="line">in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream(), <span class="string">"UTF-8"</span>));</span><br><span class="line">String line = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">boolean</span> firstLine = <span class="keyword">true</span>; <span class="comment">// 读第一行不加换行符</span></span><br><span class="line"><span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (firstLine)</span><br><span class="line">&#123;</span><br><span class="line">firstLine = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">result += System.lineSeparator();</span><br><span class="line">&#125;</span><br><span class="line">result += line;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回调测试工具方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reqStr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">postHuiDiao</span><span class="params">(String url, String body)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String result = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">OutputStreamWriter out = <span class="keyword">null</span>;</span><br><span class="line">BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置连接参数</span></span><br><span class="line">conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">conn.setReadTimeout(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交数据</span></span><br><span class="line">out = <span class="keyword">new</span> OutputStreamWriter(conn.getOutputStream(), <span class="string">"UTF-8"</span>);</span><br><span class="line">out.write(body);</span><br><span class="line">out.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取返回数据</span></span><br><span class="line">in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream(), <span class="string">"UTF-8"</span>));</span><br><span class="line">String line = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">boolean</span> firstLine = <span class="keyword">true</span>; <span class="comment">// 读第一行不加换行符</span></span><br><span class="line"><span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (firstLine)</span><br><span class="line">&#123;</span><br><span class="line">firstLine = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">result += System.lineSeparator();</span><br><span class="line">&#125;</span><br><span class="line">result += line;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、编写测试类"><a href="#3、编写测试类" class="headerlink" title="3、编写测试类"></a>3、编写测试类</h3><p>SmsSender.java (设计一个接口，就一个方法，所以使用了注解@FunctionalInterface)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SmsSender</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  发送验证码  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mobile 短信接收方</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tempId 模板类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 参数  多个用英文逗号隔开</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendVercode</span><span class="params">(String mobile,String tempId,String params)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MiaoDiSmsSender.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woniuxy.three.pms.sms;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.woniuxy.three.pms.common.config.Config;</span><br><span class="line"><span class="keyword">import</span> com.woniuxy.three.pms.common.config.HttpUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiaoDiSmsSender</span> <span class="keyword">implements</span> <span class="title">SmsSender</span></span>&#123;</span><br><span class="line">    <span class="comment">//发送类型 industrySMS 是</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String operation = <span class="string">"/industrySMS/sendSMS"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String accountSid = Config.ACCOUNT_SID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendVercode</span><span class="params">(String mobile, String tempId, String params)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    String url = Config.BASE_URL + operation;</span><br><span class="line">    String body = <span class="string">"accountSid="</span> + accountSid + </span><br><span class="line">      <span class="string">"&amp;to="</span> + mobile + </span><br><span class="line">      <span class="string">"&amp;templateid="</span> + tempId +</span><br><span class="line">      <span class="string">"&amp;param="</span> + params + </span><br><span class="line">      HttpUtil.createCommonParam();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交请求</span></span><br><span class="line">    String result = HttpUtil.post(url, body);</span><br><span class="line">    System.out.println(<span class="string">"result:"</span> + System.lineSeparator() + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SmsSender sender = <span class="keyword">new</span> MiaoDiSmsSender();</span><br><span class="line">sender.sendVercode(<span class="string">"你的手机号"</span>, <span class="string">"模板ID"</span>, <span class="string">"参数1,参数2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、扩展"><a href="#4、扩展" class="headerlink" title="4、扩展"></a>4、扩展</h3><hr><p>使用HTTPRequest来监控IP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 自定义访问对象工具类 </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * 获取对象的IP地址等信息 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> X-rapido </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CusAccessObjectUtil</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取用户真实IP地址，不使用request.getRemoteAddr();的原因是有可能用户使用了代理软件方式避免真实IP地址, </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">     * 可是，如果通过了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP值，究竟哪个才是真正的用户端的真实IP呢？ </span></span><br><span class="line"><span class="comment">     * 答案是取X-Forwarded-For中第一个非unknown的有效IP字符串。 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * 如：X-Forwarded-For：192.168.1.110, 192.168.1.120, 192.168.1.130, </span></span><br><span class="line"><span class="comment">     * 192.168.1.100 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * 用户真实IP为： 192.168.1.110 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddress</span><span class="params">(HttpServletRequest request)</span> </span>&#123;  </span><br><span class="line">        String ip = request.getHeader(<span class="string">"x-forwarded-for"</span>);  </span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;  </span><br><span class="line">            ip = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;  </span><br><span class="line">            ip = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;  </span><br><span class="line">            ip = request.getHeader(<span class="string">"HTTP_CLIENT_IP"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;  </span><br><span class="line">            ip = request.getHeader(<span class="string">"HTTP_X_FORWARDED_FOR"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;  </span><br><span class="line">            ip = request.getRemoteAddr();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> ip;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;短信设计&quot;&gt;&lt;a href=&quot;#短信设计&quot; class=&quot;headerlink&quot; title=&quot;短信设计&quot;&gt;&lt;/a&gt;短信设计&lt;/h1&gt;&lt;p&gt;1、是否需要考虑安全&lt;/p&gt;
&lt;p&gt;2、是否需要考虑回调&lt;/p&gt;
&lt;p&gt;3、是否需要考虑类型&lt;/p&gt;
&lt;h2 id=&quot;短信通
      
    
    </summary>
    
    
      <category term="SMS" scheme="http://yoursite.com/tags/SMS/"/>
    
  </entry>
  
  <entry>
    <title>Shiro学习笔记</title>
    <link href="http://yoursite.com/2019/06/06/shiro%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/06/shiro笔记/</id>
    <published>2019-06-06T06:23:30.000Z</published>
    <updated>2019-07-01T11:32:07.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shiro笔记"><a href="#shiro笔记" class="headerlink" title="shiro笔记"></a>shiro笔记</h2><hr><p>认证、授权、session管理、加密、</p><p>使用realm接口实现自定义realm</p><p>LifecycleBeanPOSTProcessor可以自定的来调用配置在springioc容器中shiro bean的生命周期</p><p>启用IOC容器中使用shiro的注解、但必须在配置了LifecycleBeanPostProcessor之后才可以使用</p><p>配置一个shiroFilter</p><p>​    id必须和web.xml文件中的  DelegatingFilterProxy的<filter-name>一致</filter-name></p><p>原因是：因为Shiro 会在IOC容器中查找和<filter-name>名字对应的filter bean</filter-name></p><p>也可以使用  <init><param-name>targetBeanName</param-name></init></p><p><param-value>IOC 容器中的beanName</param-value></p><p>在property name=”filterhainDefinitions”中配置哪些页面需要受保护，</p><p>以及访问这些页面需要的权限</p><p>​    1、anon 可以被匿名访问</p><p>​    2、authc 必须认证后才可能访问的页面。</p><p>访问不成功会访问 loginUrl 属性配置的页面</p><p>流程：</p><p>​    发送请求   拦截器filterChainDefinitions拦截（如果没有配置则通过），然后 进行校验是否认证或者检查是否有权限访问</p><p>URL 模式 使用Ant风格模式</p><p>Ant路径通配符 ?、<em>、*</em>，注意通配符匹配不包括目录分隔符  “/”：</p><p>URL权限采取第一次匹配优先的方式</p><h2 id="验证流程"><a href="#验证流程" class="headerlink" title="验证流程"></a>验证流程</h2><hr><ol><li>获取当前的Subject .调用 SecurityUtils.getSubject();</li><li>测试当前的用户是否已经被认证 . 即是否已经登录。 调用 Subject 的 isAuthenticated()</li><li>若没有被认证，则把用户名和密码封装为 UsernamePasswordToken 对象<ol><li>创建一个表单页面</li><li>把请求提交到SpringMVC 的Handler</li><li>获取用户名和密码。</li></ol></li><li>执行登录：调用Subject 的 login(AuthenticationToken) 方法。</li><li>自定义Realm 的方法，从数据库中获取对应的记录，返回给Shiro<ol><li>实际上需要继承 org.apache.shiro.realm.AuthenticatingRealm 类</li><li>实现doGetAuthenticationInfo(AuthenticationToken) 方法</li></ol></li><li>由shiro 完成对密码的比对。</li></ol><p>为什么需要继承Authentication源码分析：</p><p>​    Subject.login方法调用的是security的login方法执行authenticate(token) 进行认证，在authenticate()方法中调用authenticator.authenticate(token) 认证器，在这个方法调用了doAuthenticate(AuthenticationToken)，在这个方法中调用了一个或者多个Realm对象</p><p><code>Collection&lt;Realm&gt; realms = getRealms();</code></p><p>返回的是doSingleRealmAuthentication(realms.iterator.next(),authenticationToken);</p><p>在这个doSingleRealmAuthentication方法中有一个调用 realm.getAuthenticationInfo(token);</p><p>在getAuthenticationInfo中的info来自于doGetAuthenticationTokenInfo(token);</p><h2 id="Shiro密码比对"><a href="#Shiro密码比对" class="headerlink" title="Shiro密码比对"></a>Shiro密码比对</h2><hr><p>通过 AuthenticatingRealm 的 credentialsMatcher 属性进行的密码的比对！</p><ol><li>如何把一个字符串加密为MD5</li><li>替换当前Realm 的credentialsMatcher属性。直接使用 HashedCredentialsMatcher对象，并设置加密算法即可</li></ol><p>为什么使用MD5 盐值加密：</p><p>​    我们希望即使用户密码一样，也要保证加密后的密文不一样，我们选择单一的username进行盐值加密</p><p>如何做到：</p><pre><code>1. 在 doGetAuthenticationInfo() 方法返回值创建 SimpleAuthenticationInfo 对象的时候需要使用SimpleAuthenticationInfo(username,user.getPwd(),credentialsSalt,getName()) 构造器， 2. 使用ByteSource.Util.bytes()来计算盐值 3. 盐值需要唯一：      1. 一般使用随机字符串或user id 4. 使用 new SimpleHash(&quot;MD5&quot;, &quot;1234&quot;, credentialsSalt, 1024);来计算盐值加密后的密码的值</code></pre><h2 id="多realm验证"><a href="#多realm验证" class="headerlink" title="多realm验证"></a>多realm验证</h2><hr><p>场景：需要加密的信息存在多个数据库中</p><p><strong>配置</strong></p><p>单一的Reaml使用doSingleRealmAuthentication()方法</p><p>多Realm的时候使用doMultiRealmAuthentication()方法，</p><p>将多个Realm交给我们的ModularRealmAuthenticator（认证器）</p><p>在securityManager中配置authenticator属性，将ModularRealmAuthenticator（认证器）注入</p><p><strong>认证策略</strong></p><p>默认使用</p><p><img src="%5Cimgs%5Cstrategy.png" alt="验证当前策略的DeBug截图 strategy"></p><p>策略AtLeastOneSuccessfulStrategy（有一个Realm认证通过即可，哪怕有一个Realm认证失败了）返回所有Realm身份认证成功的认证信息，</p><p>策略AllSuccessfulStrategy（所有Realm验证成功才算成功，如果有一个失败就失败了。）且返回所有Realm身份验证成功的认证信息</p><p>策略FirstSuccessfulStrategy（只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略）</p><p>可以在authenticator（认证器）中配置属性authenticationStrategy 配置策略：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一个认证器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 验证类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"customRealm"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 认证策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AllSuccessfulStrategy"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><hr><p>为什么在org.apache.shiro.web.mgt.DefaultWebSecurityManager （安全管理器）中使用realms属性而不在org.apache.shiro.authc.pam.ModularRealmAuthenticator（认证器）使用realms属性，</p><p>因为在做授权的时候，我们需要从securityManager中读取realms，所以需要使用org.apache.shiro.web.mgt.DefaultWebSecurityManager 中的realms属性来配置</p><p><strong>Shiro授权方式</strong></p><p>编程式、注解式、JSP标签式</p><p>授权的application.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">bean class="org.apache.shiro.spring.web.ShiroFilterFactoryBean" id="shiroFilter"&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.html"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/index.html"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 没有权限 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/fail.html"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /test/login = anon</span><br><span class="line">                /login.html = anon</span><br><span class="line">                /reg.html = anon</span><br><span class="line">                /user.html = roles[laowang]</span><br><span class="line">                /admin.html = roles[admin]</span><br><span class="line">                /logout = logout</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>授权需要继承AuthorizingRealm 类， 并实现其 抽象方法 doGetAuthorizationInfo</li><li>AuthorizingRealm 类继承自 AuthenticatingRealm，但没有实现AuthenticatingRealm 中的 doGetAuthenticationInfo，所以认证her授权只需要继承AuthorizingRealm 就可以了，并同时实现它的两个抽象方法。</li></ol><p>授权时：在 SimplePrincipalCollection（PrincipalCollection的实现类） 将所有的登录用户的用户名放在一个LinkedHashSet中，也就是说我们通过PrincipalCollection的getPrimaryPrincipal方法能获取到用户的登录名，</p><p>在多Realm的时候，获取getPrimaryPrincipal()的时候，跟我们的多Realm访问顺序返回的Principal是有关系的，因为我们在linkedHashSet中存放是有顺序的</p><h2 id="权限注解"><a href="#权限注解" class="headerlink" title="权限注解"></a>权限注解</h2><hr><p>@RequiresAuthentication：表示当前Subject已经通过login进行了身份验证；即 Subject.isAuthenticated()返回true</p><p>@RequiresUser：表示当前Subject 已经身份验证或者通过记住我登陆的。</p><p>@RequiresGuest：表示当前Subject没有身份验证或通过记住我登录过，即是游客身份。</p><p>@RequiresRoles(value={“admin”,”user”},logical=Logical.AND)：表示当前Subject 需要角色 admin和user</p><p>@RequiresPermissions(value={“user:a”,”user:b”},logical=Logical.OR):表示当前Subject需要权限user:a或user:b</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;shiro笔记&quot;&gt;&lt;a href=&quot;#shiro笔记&quot; class=&quot;headerlink&quot; title=&quot;shiro笔记&quot;&gt;&lt;/a&gt;shiro笔记&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;认证、授权、session管理、加密、&lt;/p&gt;
&lt;p&gt;使用realm接口实现自定义real
      
    
    </summary>
    
    
      <category term="Shiro" scheme="http://yoursite.com/tags/Shiro/"/>
    
  </entry>
  
</feed>
